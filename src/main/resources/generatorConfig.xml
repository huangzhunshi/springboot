<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 配置文件路径 -->
    <properties resource="generator.properties"/>

    <!--数据库驱动包路径 -->
    <classPathEntry location="${jdbc.driverLocation}"/>

    <context id="default" targetRuntime="MyBatis3" defaultModelType="flat">

        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <commentGenerator>
            <!--  去掉反程序员的注释  -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--数据库连接信息 -->
        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--生成的model 包路径 -->
        <javaModelGenerator targetPackage="${model.package}"
                            targetProject="${model.target.project}">
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>

            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>

            <!-- immutable:该属性用来配置实体类属性是否可变，如果设置为true，那么constructorBased不管设置成什么，
            都会使用构造方法入参，并且不会生成setter方法。如果为false，实体类属性就可以改变。默认为false -->
            <property name="immutable" value="false"/>

            <!-- rootClass:设置所有实体类的基类。如果设置，需要使用类的全限定名称。并且如果MBG能够加载rootClass，
            那么MBG不会覆盖和父类中完全匹配的属性。匹配规则：
                属性名完全相同
                属性类型相同
                属性有getter方法
                属性有setter方法
            -->
            <!--<property name="rootClass" value="${model.superclass}"/>-->

            <!-- trimStrings:是否对数据库查询结果进行trim操作，如果设置为true就会生成类似这样
            public void setUsername(String username)
            {
                this.username = username == null ? null : username.trim();
            }
            的setter方法。默认值为false。
            -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--生成xml mapper文件 路径 -->
        <sqlMapGenerator targetPackage="${xml.package}"
                         targetProject="${xml.target.project}">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 生成的Dao接口 的包路径 -->
        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
        type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
        type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
        type="XMLMAPPER",生成SQLMap

        -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="${dao.package}"
                             targetProject="${dao.target.project}">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <table mapperName="GridDAO" tableName="grid" domainObjectName="GridDO"
               enableCountByExample="false"
               enableUpdateByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" selectByExampleQueryId="false">
        </table>

        <table mapperName="GeoPointDAO" tableName="geo_point" domainObjectName="GeoPointDO"
               enableCountByExample="false"
               enableUpdateByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" selectByExampleQueryId="false">
        </table>

        <table mapperName="GridShopDAO" tableName="grid_shop" domainObjectName="GridShopDO"
               enableCountByExample="false"
               enableUpdateByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" selectByExampleQueryId="false">
        </table>

    <!--<table mapperName="MerchantProfitDAO" tableName="merchant_profit" domainObjectName="MerchantProfitDO"-->
      <!--enableCountByExample="false"-->
      <!--enableUpdateByExample="false" enableDeleteByExample="false"-->
      <!--enableSelectByExample="false" selectByExampleQueryId="false">-->
    <!--</table>-->
    <!--<table mapperName="BrandTargetDAO" tableName="brand_merchant"-->
      <!--domainObjectName="BrandTargetDO"-->
      <!--enableCountByExample="false"-->
      <!--enableUpdateByExample="false" enableDeleteByExample="false"-->
      <!--enableSelectByExample="false" selectByExampleQueryId="false">-->
    <!--</table>-->

        <table mapperName="CanalTestDAO" tableName="canal_test" domainObjectName="CanalTestDO"
               enableCountByExample="false"
               enableUpdateByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" selectByExampleQueryId="false">
        </table>
        <!--<table mapperName="DeviceFindBackRecordDAO" tableName="device_find_back_record" domainObjectName="DeviceFindBackRecordDO"-->
               <!--enableCountByExample="false"-->
               <!--enableUpdateByExample="false" enableDeleteByExample="false"-->
               <!--enableSelectByExample="false" selectByExampleQueryId="false">-->
        <!--</table>-->


        <!--对应数据库表名 -->
        <!--<table tableName="syslogistics_d%" enableCountByExample="false"-->
        <!--enableUpdateByExample="false" enableDeleteByExample="false"-->
        <!--enableSelectByExample="false" selectByExampleQueryId="false">-->
        <!-- optional   , only for mybatis3 runtime
         自动生成的键值（identity,或者序列值）
         如果指定此元素，MBG将会生成<selectKey>元素，然后将此元素插入到SQL Map的<insert> 元素之中
         sqlStatement 的语句将会返回新的值
         如果是一个自增主键的话，你可以使用预定义的语句,或者添加自定义的SQL语句. 预定义的值如下:
            Cloudscape    This will translate to: VALUES IDENTITY_VAL_LOCAL()
            DB2:      VALUES IDENTITY_VAL_LOCAL()
            DB2_MF:       SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
            Derby:        VALUES IDENTITY_VAL_LOCAL()
            HSQLDB:   CALL IDENTITY()
            Informix:     select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
            MySql:        SELECT LAST_INSERT_ID()
            SqlServer:    SELECT SCOPE_IDENTITY()
            SYBASE:   SELECT @@IDENTITY
            JDBC:     This will configure MBG to generate code for MyBatis3 suport of JDBC standard generated keys.
            This is a database independent method of obtaining the value from identity columns.
            identity: 自增主键  If true, then the column is flagged as an identity column and the generated <selectKey>
            element will be placed after the insert (for an identity column). If false, then the generated <selectKey>
            will be placed before the insert (typically for a sequence).

        -->
        <!--<generatedKey column="" sqlStatement="" identity="" type=""/>-->


        <!-- optional.
                列的命名规则：
                MBG使用 <columnRenamingRule> 元素在计算列名的对应 名称之前，先对列名进行重命名，
                作用：一般需要对BUSI_CLIENT_NO 前的BUSI_进行过滤
                支持正在表达式
                 searchString 表示要被换掉的字符串
                 replaceString 则是要换成的字符串，默认情况下为空字符串，可选
        -->
        <!--<columnRenamingRule searchString="" replaceString=""/>-->


        <!-- optional.告诉 MBG 忽略某一列
                column，需要忽略的列
                delimitedColumnName:true ,匹配column的值和数据库列的名称 大小写完全匹配，false 忽略大小写匹配
                是否限定表的列名，即固定表列在Model中的名称
        -->
        <!--<ignoreColumn column="PLAN_ID" delimitedColumnName="true"/>-->


        <!--optional.覆盖MBG对Model 的生成规则
             column: 数据库的列名
             javaType: 对应的Java数据类型的完全限定名
             在必要的时候可以覆盖由JavaTypeResolver计算得到的java数据类型.
             For some databases, this is necessary to handle "odd" database types
             (e.g. MySql's unsigned bigint type should be mapped to java.lang.Object).
             jdbcType:该列的JDBC数据类型(INTEGER, DECIMAL, NUMERIC, VARCHAR, etc.)，
             该列可以覆盖由JavaTypeResolver计算得到的Jdbc类型，对某些数据库而言，对于处理特定的JDBC 驱动癖好
             很有必要(e.g. DB2's LONGVARCHAR type should be mapped to VARCHAR for iBATIS).
             typeHandler:

        -->
        <!--<columnOverride column="" javaType="" jdbcType="" typeHandler="" delimitedColumnName=""/>-->
        <!--</table>-->
    </context>
</generatorConfiguration>